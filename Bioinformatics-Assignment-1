{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c38573a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.93\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from random import random\n",
    "\n",
    "def waiting_time(probability, pattern):\n",
    "    pattern_size = len(pattern)\n",
    "    sequence = ''\n",
    "    \n",
    "    #Main loop\n",
    "    '''\n",
    "    First condition:\n",
    "    Used to generate sequence of at least \"pattern size\"\n",
    "    Example: RYY\n",
    "    pattern_size = 3\n",
    "    \n",
    "    Second condition:\n",
    "    Checks if the last \"pattern_size is\" (in our case 3) matches with our input pattern\n",
    "    \n",
    "    if r<0.5\n",
    "    then add 'R'\n",
    "    \n",
    "    if r<1\n",
    "    then add 'Y'\n",
    "    '''\n",
    "    \n",
    "    while len(sequence) < pattern_size or sequence[-pattern_size:] != pattern:\n",
    "        ran = random() #sampling a random number between 0 and 1\n",
    "        p = 0\n",
    "        for letter in probability:\n",
    "            p += probability[letter]\n",
    "            '''\n",
    "            p = 0.5\n",
    "            ran = 0.75\n",
    "            \n",
    "            letter = 'Y'\n",
    "            p = 1 (0.5+0.5)\n",
    "            \n",
    "            '''\n",
    "            if ran < p:\n",
    "                sequence += letter\n",
    "                break\n",
    "    return len(sequence)\n",
    "#composition is uniform by default, but can be changed using parameters\n",
    "\n",
    "'''\n",
    "Example:\n",
    "Sequences of Purines(R) and Pyrimidines(Y)\n",
    "Probability of drawing R - p\n",
    "Probability of drawing Y - q\n",
    "\n",
    "In this case we take p = q = 0.5\n",
    "\n",
    "Dictionary Structure: holds key-value pairs\n",
    "{\n",
    "'R' = 0.5,\n",
    "'Y' = 0.5\n",
    "}\n",
    "'''\n",
    "\n",
    "probability = dict()\n",
    "probability['R']=0.75\n",
    "probability['Y']=0.25\n",
    "\n",
    "#Target pattern\n",
    "pattern = \"RY\"\n",
    "\n",
    "#number of patterns to generate\n",
    "#used to find the average waiting time\n",
    "n = 100\n",
    "\n",
    "#sample waiting times\n",
    "waiting_times = [waiting_time(probability, pattern) for i in range(n)]\n",
    "\n",
    "#print the average waiting time\n",
    "print(np.mean(waiting_times))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8997ee08",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
